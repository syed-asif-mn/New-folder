use("ProductOrder")

/* Create collections "Product","Inventory",
"User", and "Order" */
db.createCollection("Product")
db.createCollection("Inventory")
db.createCollection("User")
db.createCollection("Order")

/* Display the first 5 rows of product, inventory, user, 
and order collection. */
db.Product.find().limit(5)
db.Inventory.find().limit(5)
db.User.find().limit(5)
db.Order.find().limit(5)

// Unique Brand names from the Product collection
db.Product.distinct("brand")
// Unique Model names from the Product collection
db.Product.distinct("model")

// Maximum price from the Product collection
db.Product.find({},{_id:0,price:1}).sort({"price":-1}).limit(1)

// Product with the Maximum price from the Product collection
db.Product.find().sort({"price":-1}).limit(1)

// Minimum price from the Product collection
db.Product.find({},{_id:0,price:1}).sort({"price":1}).limit(1)

// Product with the Minimum price from the Product collection
db.Product.find().sort({"price":-1}).limit(1)

// quantity and last_updated date and time for sku "SNY-11001"
db.Inventory.find({"sku":"SNY-11001"}, 
		{_id:0, quantity:1, last_updated:1})

/* Count of the total number of users whose role is 
identified as 'Supplier' from User collection */
db.User.find({"role":"Supplier"}).count()

/* 'sku', 'code', 'price', 'brand' and 'warranty' 
information for the model 'Bravia-X' */
db.Product.find({"model":"Bravia-X"}, 
    {_id:0, sku: 1, code: 1, price: 1, brand: 1, warranty: 1})

/* Information of Sony products which have an Price greater
than 1 lakh */
db.Product.find({$and: 
            [{ brand: "Sony" }, { price: { $gt: 100000 }}]})

/* Total no of products by each Brand and sort them in 
descending order. */
db.Product.aggregate([
{ $group: {
  _id: "$brand",
  products: { $sum: 1 },  
}},
{ $sort: { 
    products: -1, _id: -1 
}},
{ $project: {
    brand: "$_id", 
    products: 1,
    _id: 0
}}])

/* Find the total no of users by each role, 
sort them in descending order and save the results 
in the temporary collection */
db.User.aggregate([
{ $group: {
  _id: "$role",
  count: { $sum: 1 },  
}},
{ $sort: { 
    count: -1, _id: -1 
}},
{ $project: {
    role: "$_id", 
    count: 1,
    _id: 0
}},
// write output as a new collection
{ 
    $out : "user_count_by_role"
}])

db.user_count_by_role.find()